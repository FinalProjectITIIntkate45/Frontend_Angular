@model IEnumerable<RecyclingRequestListItemViewModel>
@{
    ViewData["Title"] = "Recycling Requests Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2 class="text-primary">
        <i class="fas fa-recycle me-2"></i>
        Recycling Requests Management
    </h2>
    <div>
        <a asp-action="Statistics" class="btn btn-info me-2">
            <i class="fas fa-chart-bar me-1"></i>
            Statistics
        </a>
    </div>
</div>

<!-- Alert Messages -->
@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Filters and Search -->
<div class="card mb-4">
    <div class="card-body">
        <form method="get" class="row g-3">
            <div class="col-md-4">
                <label for="searchTerm" class="form-label">Search</label>
                <input type="text" class="form-control" id="searchTerm" name="searchTerm" 
                       value="@ViewBag.SearchTerm" placeholder="Search by material, user, or location...">
            </div>
            <div class="col-md-3">
                <label for="status" class="form-label">Status</label>
                <select class="form-select" id="status" name="status">
                    <option value="">All Statuses</option>
                    <option value="Pending" @(ViewBag.Status == "Pending" ? "selected" : "")>Pending</option>
                    <option value="Accepted" @(ViewBag.Status == "Accepted" ? "selected" : "")>Accepted</option>
                    <option value="Rejected" @(ViewBag.Status == "Rejected" ? "selected" : "")>Rejected</option>
                    <option value="Completed" @(ViewBag.Status == "Completed" ? "selected" : "")>Completed</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <button type="submit" class="btn btn-primary d-block w-100">
                    <i class="fas fa-search me-1"></i>
                    Filter
                </button>
            </div>
            <div class="col-md-2">
                <label class="form-label">&nbsp;</label>
                <a asp-action="Index" class="btn btn-secondary d-block w-100">
                    <i class="fas fa-times me-1"></i>
                    Clear
                </a>
            </div>
        </form>
    </div>
</div>

<!-- Bulk Actions -->
<form id="bulkActionForm" method="post" asp-action="BulkAction">
    <div class="mb-3">
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-success" onclick="performBulkAction('approve')">
                <i class="fas fa-check me-1"></i>
                Approve Selected
            </button>
            <button type="button" class="btn btn-warning" onclick="performBulkAction('reject')">
                <i class="fas fa-times me-1"></i>
                Reject Selected
            </button>
            <button type="button" class="btn btn-danger" onclick="performBulkAction('delete')">
                <i class="fas fa-trash me-1"></i>
                Delete Selected
            </button>
        </div>
    </div>

    <!-- Requests Table -->
    <div class="table-responsive">
        <table class="table table-bordered table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>
                        <input type="checkbox" id="selectAll" class="form-check-input">
                    </th>
                    <th>ID</th>
                    <th>Material</th>
                    <th>Client</th>
                    <th>Location</th>
                    <th>Quantity</th>
                    <th>Status</th>
                    <th>Points</th>
                    <th>Created Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (!Model.Any())
                {
                    <tr>
                        <td colspan="10" class="text-center text-muted py-4">
                            <i class="fas fa-inbox fa-2x mb-3"></i>
                            <br>
                            No recycling requests found.
                        </td>
                    </tr>
                }
                else
                {
                    foreach (var request in Model)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" name="requestIds" value="@request.id" class="form-check-input request-checkbox">
                            </td>
                            <td>
                                <span class="badge bg-secondary">#@request.id</span>
                            </td>
                            <td>
                                <strong>@request.materialName</strong>
                                <br>
                                <small class="text-muted">@GetUnitTypeDisplayName(request.unitType)</small>
                            </td>
                            <td>
                                <i class="fas fa-user me-1"></i>
                                @request.clientUsername
                            </td>
                            <td>
                                <i class="fas fa-map-marker-alt me-1"></i>
                                @request.city
                                <br>
                                <small class="text-muted">@request.address</small>
                            </td>
                            <td>
                                <span class="badge bg-info">
                                    @request.quantity @GetUnitTypeDisplayName(request.unitType).ToLower()
                                </span>
                            </td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(request.status)">
                                    @GetStatusText(request.status)
                                </span>
                            </td>
                            <td>
                                @if (request.pointsAwarded.HasValue && request.pointsAwarded > 0)
                                {
                                    <span class="text-success fw-bold">
                                        <i class="fas fa-star me-1"></i>
                                        @request.pointsAwarded
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>
                                <small class="text-muted">
                                    <i class="fas fa-calendar me-1"></i>
                                    @request.createdAt.ToString("MMM dd, yyyy")
                                    <br>
                                    <i class="fas fa-clock me-1"></i>
                                    @request.createdAt.ToString("HH:mm")
                                </small>
                            </td>
                            <td>
                                <div class="btn-group-vertical btn-group-sm">
                                    <a asp-action="Details" asp-route-id="@request.id" 
                                       class="btn btn-outline-info btn-sm" title="View Details">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a asp-action="Edit" asp-route-id="@request.id" 
                                       class="btn btn-outline-warning btn-sm" title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@request.id" 
                                       class="btn btn-outline-danger btn-sm" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</form>

<!-- Pagination -->
@if (ViewBag.TotalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(ViewBag.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" asp-action="Index" asp-route-page="@(ViewBag.CurrentPage - 1)" 
                   asp-route-status="@ViewBag.Status" asp-route-searchTerm="@ViewBag.SearchTerm">
                    Previous
                </a>
            </li>
            
            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-page="@i" 
                       asp-route-status="@ViewBag.Status" asp-route-searchTerm="@ViewBag.SearchTerm">
                        @i
                    </a>
                </li>
            }
            
            <li class="page-item @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">
                <a class="page-link" asp-action="Index" asp-route-page="@(ViewBag.CurrentPage + 1)" 
                   asp-route-status="@ViewBag.Status" asp-route-searchTerm="@ViewBag.SearchTerm">
                    Next
                </a>
            </li>
        </ul>
    </nav>
}

@section Scripts {
    <script>
        // Select all functionality
        document.getElementById('selectAll').addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('.request-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });

        // Bulk action functionality
        function performBulkAction(action) {
            const selectedCheckboxes = document.querySelectorAll('.request-checkbox:checked');
            
            if (selectedCheckboxes.length === 0) {
                alert('Please select at least one request.');
                return;
            }

            if (confirm(`Are you sure you want to ${action} ${selectedCheckboxes.length} request(s)?`)) {
                const form = document.getElementById('bulkActionForm');
                const actionInput = document.createElement('input');
                actionInput.type = 'hidden';
                actionInput.name = 'action';
                actionInput.value = action;
                form.appendChild(actionInput);
                form.submit();
            }
        }

        // Update select all checkbox
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('request-checkbox')) {
                const allCheckboxes = document.querySelectorAll('.request-checkbox');
                const checkedCheckboxes = document.querySelectorAll('.request-checkbox:checked');
                const selectAllCheckbox = document.getElementById('selectAll');
                
                selectAllCheckbox.checked = allCheckboxes.length === checkedCheckboxes.length;
                selectAllCheckbox.indeterminate = checkedCheckboxes.length > 0 && checkedCheckboxes.length < allCheckboxes.length;
            }
        });
    </script>
}

@functions {
    private string GetStatusBadgeClass(RecyclingRequestStatus status)
    {
        return status switch
        {
            RecyclingRequestStatus.Pending => "bg-warning",
            RecyclingRequestStatus.Accepted => "bg-success",
            RecyclingRequestStatus.Rejected => "bg-danger",
            RecyclingRequestStatus.Completed => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(RecyclingRequestStatus status)
    {
        return status switch
        {
            RecyclingRequestStatus.Pending => "Pending",
            RecyclingRequestStatus.Accepted => "Accepted",
            RecyclingRequestStatus.Rejected => "Rejected",
            RecyclingRequestStatus.Completed => "Completed",
            _ => "Unknown"
        };
    }

    private string GetUnitTypeDisplayName(UnitOfMeasurementType unitType)
    {
        return unitType switch
        {
            UnitOfMeasurementType.Kilogram => "Kilogram",
            UnitOfMeasurementType.Gram => "Gram",
            UnitOfMeasurementType.Liter => "Liter",
            UnitOfMeasurementType.Milliliter => "Milliliter",
            UnitOfMeasurementType.Piece => "Piece",
            UnitOfMeasurementType.Meter => "Meter",
            UnitOfMeasurementType.Centimeter => "Centimeter",
            _ => "Unknown"
        };
    }
} 